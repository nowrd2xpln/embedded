
twi_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000218  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000218  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000954  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000016e  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000064  00000000  00000000  00000dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000240  00000000  00000000  00000e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000179  00000000  00000000  0000105e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000023a  00000000  00000000  000011d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000fd  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009e  00000000  00000000  00001581  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000004a  00000000  00000000  0000161f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 0a 01 	jmp	0x214	; 0x214 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
/* F_CPU & BAUD RATE */
#define F_CPU       8000000UL	            //--- CPU Clock Frequency    

int main(void)
{
	usart_init(57600);
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	71 ee       	ldi	r23, 0xE1	; 225
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 50 00 	call	0xa0	; 0xa0 <usart_init>
	
	usart_msg("\r\n\r\nAtmega16 Bootup\r\n");
  8e:	80 e6       	ldi	r24, 0x60	; 96
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 97 00 	call	0x12e	; 0x12e <usart_msg>
    usart_msg("Intializing USART\r\n");
  96:	86 e7       	ldi	r24, 0x76	; 118
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 97 00 	call	0x12e	; 0x12e <usart_msg>
  9e:	ff cf       	rjmp	.-2      	; 0x9e <main+0x1c>

000000a0 <usart_init>:
#include <avr/io.h>
#include <stdint.h>
#include "usart.h"

void usart_init(uint32_t baud)
{
  a0:	0f 93       	push	r16
  a2:	1f 93       	push	r17
  a4:	df 93       	push	r29
  a6:	cf 93       	push	r28
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	a0 97       	sbiw	r28, 0x20	; 32
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	9b 01       	movw	r18, r22
  ba:	ac 01       	movw	r20, r24
	uint16_t baudrate = 0;
	uint16_t ubrr = 0;
	char msg[32] = {0};
  bc:	8e 01       	movw	r16, r28
  be:	0f 5f       	subi	r16, 0xFF	; 255
  c0:	1f 4f       	sbci	r17, 0xFF	; 255
  c2:	80 e2       	ldi	r24, 0x20	; 32
  c4:	f8 01       	movw	r30, r16
  c6:	11 92       	st	Z+, r1
  c8:	8a 95       	dec	r24
  ca:	e9 f7       	brne	.-6      	; 0xc6 <usart_init+0x26>
	
	baudrate = F_CPU/baud/16UL - 1;
	UBRRH = 0;
  cc:	10 bc       	out	0x20, r1	; 32
{
	uint16_t baudrate = 0;
	uint16_t ubrr = 0;
	char msg[32] = {0};
	
	baudrate = F_CPU/baud/16UL - 1;
  ce:	60 e2       	ldi	r22, 0x20	; 32
  d0:	71 ea       	ldi	r23, 0xA1	; 161
  d2:	87 e0       	ldi	r24, 0x07	; 7
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 a3 00 	call	0x146	; 0x146 <__udivmodsi4>
	UBRRH = 0;
	UBRRL = baudrate+1;                     			//--- Calculation is somehow off by 1
  da:	29 b9       	out	0x09, r18	; 9
    UCSRB = (1<<TXEN) | (1<<RXEN);      			//--- Transmit and Receive Enable
  dc:	88 e1       	ldi	r24, 0x18	; 24
  de:	8a b9       	out	0x0a, r24	; 10
    UCSRC|= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);	//--- Set the number of bits in a frame for RX/TX
  e0:	80 b5       	in	r24, 0x20	; 32
  e2:	86 68       	ori	r24, 0x86	; 134
  e4:	80 bd       	out	0x20, r24	; 32
	
	itoa(UBRRL, msg, 10);
  e6:	89 b1       	in	r24, 0x09	; 9
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	b8 01       	movw	r22, r16
  ec:	4a e0       	ldi	r20, 0x0A	; 10
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	0e 94 c5 00 	call	0x18a	; 0x18a <itoa>
  f4:	f8 01       	movw	r30, r16
    return(UDR);                        //--- Return Data from UDR
}
 
void usart_msg(char *c)
{
    while (*c != NULL)                  //--- Check for null
  f6:	81 91       	ld	r24, Z+
  f8:	88 23       	and	r24, r24
  fa:	31 f0       	breq	.+12     	; 0x108 <usart_init+0x68>
	usart_msg(msg);
}
 
void usart_tx(char x)
{
    UDR = x;                            //--- Move data to UDR Data Reg
  fc:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSRA & (1<<UDRE)));	    //--- Check whether UDR is empty
  fe:	5d 9b       	sbis	0x0b, 5	; 11
 100:	fe cf       	rjmp	.-4      	; 0xfe <usart_init+0x5e>
    return(UDR);                        //--- Return Data from UDR
}
 
void usart_msg(char *c)
{
    while (*c != NULL)                  //--- Check for null
 102:	81 91       	ld	r24, Z+
 104:	88 23       	and	r24, r24
 106:	d1 f7       	brne	.-12     	; 0xfc <usart_init+0x5c>
    UCSRB = (1<<TXEN) | (1<<RXEN);      			//--- Transmit and Receive Enable
    UCSRC|= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);	//--- Set the number of bits in a frame for RX/TX
	
	itoa(UBRRL, msg, 10);
	usart_msg(msg);
}
 108:	a0 96       	adiw	r28, 0x20	; 32
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	cd bf       	out	0x3d, r28	; 61
 114:	cf 91       	pop	r28
 116:	df 91       	pop	r29
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	08 95       	ret

0000011e <usart_tx>:
 
void usart_tx(char x)
{
    UDR = x;                            //--- Move data to UDR Data Reg
 11e:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSRA & (1<<UDRE)));	    //--- Check whether UDR is empty
 120:	5d 9b       	sbis	0x0b, 5	; 11
 122:	fe cf       	rjmp	.-4      	; 0x120 <usart_tx+0x2>
}
 124:	08 95       	ret

00000126 <usart_rx>:

char usart_rx()
{
    while (!(UCSRA & (1<<RXC)));	    //--- Check whether Receive is complete
 126:	5f 9b       	sbis	0x0b, 7	; 11
 128:	fe cf       	rjmp	.-4      	; 0x126 <usart_rx>
    return(UDR);                        //--- Return Data from UDR
 12a:	8c b1       	in	r24, 0x0c	; 12
}
 12c:	08 95       	ret

0000012e <usart_msg>:
 
void usart_msg(char *c)
{
 12e:	e8 2f       	mov	r30, r24
 130:	f9 2f       	mov	r31, r25
    while (*c != NULL)                  //--- Check for null
 132:	81 91       	ld	r24, Z+
 134:	88 23       	and	r24, r24
 136:	31 f0       	breq	.+12     	; 0x144 <usart_msg+0x16>
	usart_msg(msg);
}
 
void usart_tx(char x)
{
    UDR = x;                            //--- Move data to UDR Data Reg
 138:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSRA & (1<<UDRE)));	    //--- Check whether UDR is empty
 13a:	5d 9b       	sbis	0x0b, 5	; 11
 13c:	fe cf       	rjmp	.-4      	; 0x13a <usart_msg+0xc>
    return(UDR);                        //--- Return Data from UDR
}
 
void usart_msg(char *c)
{
    while (*c != NULL)                  //--- Check for null
 13e:	81 91       	ld	r24, Z+
 140:	88 23       	and	r24, r24
 142:	d1 f7       	brne	.-12     	; 0x138 <usart_msg+0xa>
        usart_tx(*c++);                 //--- Increment the pointer 
}
 144:	08 95       	ret

00000146 <__udivmodsi4>:
 146:	a1 e2       	ldi	r26, 0x21	; 33
 148:	1a 2e       	mov	r1, r26
 14a:	aa 1b       	sub	r26, r26
 14c:	bb 1b       	sub	r27, r27
 14e:	fd 01       	movw	r30, r26
 150:	0d c0       	rjmp	.+26     	; 0x16c <__udivmodsi4_ep>

00000152 <__udivmodsi4_loop>:
 152:	aa 1f       	adc	r26, r26
 154:	bb 1f       	adc	r27, r27
 156:	ee 1f       	adc	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	a2 17       	cp	r26, r18
 15c:	b3 07       	cpc	r27, r19
 15e:	e4 07       	cpc	r30, r20
 160:	f5 07       	cpc	r31, r21
 162:	20 f0       	brcs	.+8      	; 0x16c <__udivmodsi4_ep>
 164:	a2 1b       	sub	r26, r18
 166:	b3 0b       	sbc	r27, r19
 168:	e4 0b       	sbc	r30, r20
 16a:	f5 0b       	sbc	r31, r21

0000016c <__udivmodsi4_ep>:
 16c:	66 1f       	adc	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	88 1f       	adc	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	1a 94       	dec	r1
 176:	69 f7       	brne	.-38     	; 0x152 <__udivmodsi4_loop>
 178:	60 95       	com	r22
 17a:	70 95       	com	r23
 17c:	80 95       	com	r24
 17e:	90 95       	com	r25
 180:	9b 01       	movw	r18, r22
 182:	ac 01       	movw	r20, r24
 184:	bd 01       	movw	r22, r26
 186:	cf 01       	movw	r24, r30
 188:	08 95       	ret

0000018a <itoa>:
 18a:	fb 01       	movw	r30, r22
 18c:	9f 01       	movw	r18, r30
 18e:	e8 94       	clt
 190:	42 30       	cpi	r20, 0x02	; 2
 192:	c4 f0       	brlt	.+48     	; 0x1c4 <itoa+0x3a>
 194:	45 32       	cpi	r20, 0x25	; 37
 196:	b4 f4       	brge	.+44     	; 0x1c4 <itoa+0x3a>
 198:	4a 30       	cpi	r20, 0x0A	; 10
 19a:	29 f4       	brne	.+10     	; 0x1a6 <itoa+0x1c>
 19c:	97 fb       	bst	r25, 7
 19e:	1e f4       	brtc	.+6      	; 0x1a6 <itoa+0x1c>
 1a0:	90 95       	com	r25
 1a2:	81 95       	neg	r24
 1a4:	9f 4f       	sbci	r25, 0xFF	; 255
 1a6:	64 2f       	mov	r22, r20
 1a8:	77 27       	eor	r23, r23
 1aa:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__udivmodhi4>
 1ae:	80 5d       	subi	r24, 0xD0	; 208
 1b0:	8a 33       	cpi	r24, 0x3A	; 58
 1b2:	0c f0       	brlt	.+2      	; 0x1b6 <itoa+0x2c>
 1b4:	89 5d       	subi	r24, 0xD9	; 217
 1b6:	81 93       	st	Z+, r24
 1b8:	cb 01       	movw	r24, r22
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	a1 f7       	brne	.-24     	; 0x1a6 <itoa+0x1c>
 1be:	16 f4       	brtc	.+4      	; 0x1c4 <itoa+0x3a>
 1c0:	5d e2       	ldi	r21, 0x2D	; 45
 1c2:	51 93       	st	Z+, r21
 1c4:	10 82       	st	Z, r1
 1c6:	c9 01       	movw	r24, r18
 1c8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <strrev>

000001cc <strrev>:
 1cc:	dc 01       	movw	r26, r24
 1ce:	fc 01       	movw	r30, r24
 1d0:	67 2f       	mov	r22, r23
 1d2:	71 91       	ld	r23, Z+
 1d4:	77 23       	and	r23, r23
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <strrev+0x4>
 1d8:	32 97       	sbiw	r30, 0x02	; 2
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <strrev+0x18>
 1dc:	7c 91       	ld	r23, X
 1de:	6d 93       	st	X+, r22
 1e0:	70 83       	st	Z, r23
 1e2:	62 91       	ld	r22, -Z
 1e4:	ae 17       	cp	r26, r30
 1e6:	bf 07       	cpc	r27, r31
 1e8:	c8 f3       	brcs	.-14     	; 0x1dc <strrev+0x10>
 1ea:	08 95       	ret

000001ec <__udivmodhi4>:
 1ec:	aa 1b       	sub	r26, r26
 1ee:	bb 1b       	sub	r27, r27
 1f0:	51 e1       	ldi	r21, 0x11	; 17
 1f2:	07 c0       	rjmp	.+14     	; 0x202 <__udivmodhi4_ep>

000001f4 <__udivmodhi4_loop>:
 1f4:	aa 1f       	adc	r26, r26
 1f6:	bb 1f       	adc	r27, r27
 1f8:	a6 17       	cp	r26, r22
 1fa:	b7 07       	cpc	r27, r23
 1fc:	10 f0       	brcs	.+4      	; 0x202 <__udivmodhi4_ep>
 1fe:	a6 1b       	sub	r26, r22
 200:	b7 0b       	sbc	r27, r23

00000202 <__udivmodhi4_ep>:
 202:	88 1f       	adc	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	5a 95       	dec	r21
 208:	a9 f7       	brne	.-22     	; 0x1f4 <__udivmodhi4_loop>
 20a:	80 95       	com	r24
 20c:	90 95       	com	r25
 20e:	bc 01       	movw	r22, r24
 210:	cd 01       	movw	r24, r26
 212:	08 95       	ret

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>
